import React, { useCallback, useEffect, useRef, useState } from 'react'
import { BaseProps } from '@/types'
import Editor, { Monaco, OnMount } from '@monaco-editor/react'
import { useCodeAnalysis } from './useCodeAnalysis'
import axios from 'axios'
import type { editor, IRange, Position } from 'monaco-editor'
import { refactorCode } from '../../services/aiRefactor'
import { analyzeCode, getCachedAnalysis } from '../../services/codeAnalysis'

/**
 * TODO: 
 * 1. –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:
 *    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prettier –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 *    - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–µ–∫—Ç–∞
 *    - –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Alt+Shift+F)
 * 
 * 2. –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
 *    - –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
 *    - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
 *    - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * 
 * 3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç —Å Grog API:
 *    - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑
 *    - –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 *    - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
 */

interface EditorProps extends BaseProps {
  isDarkMode: boolean
  onSave?: (code: string) => void
  onChange?: (code: string) => void
  currentFile: { id: string; name: string; content: string } | null
}

export default function CodeEditor({ isDarkMode, onSave, onChange, currentFile }: EditorProps) {
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null)
  const monacoRef = useRef<Monaco | null>(null)
  const [code, setCode] = React.useState(currentFile?.content || "// Select a file to start editing")
  const [analysis, setAnalysis] = useState<CodeAnalysisResult | null>(null)
  const lastAnalyzedFileId = useRef<string | null>(null)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞
  useEffect(() => {
    if (currentFile?.id && currentFile.id !== lastAnalyzedFileId.current) {
      const cachedAnalysis = getCachedAnalysis(currentFile.id, currentFile.content);
      if (cachedAnalysis) {
        setAnalysis(cachedAnalysis);
        lastAnalyzedFileId.current = currentFile.id;
      }
    }
  }, [currentFile?.id]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç ID —Ñ–∞–π–ª–∞

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–π–ª–∞
  useEffect(() => {
    if (currentFile) {
      setCode(currentFile.content);
    }
  }, [currentFile]);

  const handleAIFix = async (suggestion: CodeSuggestion, lineContent: string) => {
    if (!editorRef.current) return;
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'AI is analyzing the code...';
      document.body.appendChild(notification);

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É API
      const response = await axios.post('/api/fix-code', {
        code: lineContent,
        suggestion: suggestion.message,
        severity: suggestion.severity
      });

      const fixedCode = response.data.fix;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      const editor = editorRef.current;
      const model = editor.getModel();
      if (model) {
        editor.executeEdits('ai-fix', [{
          range: new monaco.Range(
            suggestion.line,
            1,
            suggestion.line,
            model.getLineMaxColumn(suggestion.line)
          ),
          text: fixedCode
        }]);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'Code fixed successfully!';
      setTimeout(() => notification.remove(), 2000);
    } catch (error) {
      console.error('AI Fix Error:', error);
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'Failed to fix code with AI';
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 2000);
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  useCodeAnalysis({
    editor: editorRef.current,
    analysis,
    onFixRequest: handleAIFix
  })

  const handleEditorDidMount: OnMount = (editor, monaco) => {
    editorRef.current = editor
    monacoRef.current = monaco

    // –î–æ–±–∞–≤–ª—è–µ–º AI –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    editor.addAction({
      id: 'ai-refactor',
      label: 'ü§ñ Refactor with AI',
      contextMenuGroupId: 'ai',
      contextMenuOrder: 1.5,
      run: async (ed) => {
        const selection = ed.getSelection();
        if (selection) {
          const selectedText = ed.getModel()?.getValueInRange(selection);
          if (selectedText) {
            await handleAIRefactor(selectedText, selection);
          }
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º hover provider –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    monaco.languages.registerHoverProvider('typescript', {
      provideHover: (model, position) => {
        const word = model.getWordAtPosition(position);
        if (!word) return null;

        const range = {
          startLineNumber: position.lineNumber,
          startColumn: word.startColumn,
          endLineNumber: position.lineNumber,
          endColumn: word.endColumn
        };

        return {
          range,
          contents: [
            { value: 'ü§ñ **AI Assistant Available**' },
            { value: 'Select code and right-click to refactor with AI' }
          ]
        };
      }
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF, () => {
      const findController = editor.getContribution('editor.contrib.findController') as any
      if (findController) {
        const selection = editor.getSelection()
        const searchText = selection ? editor.getModel()?.getValueInRange(selection) : ''
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω—ë–º
        if (findController.start) {
          findController.start({
            searchString: searchText || '',
            isRegex: false,
            matchCase: false,
            wholeWord: false,
          })
        }
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        setTimeout(() => {
          const findInput = document.querySelector('.monaco-editor .find-widget .input') as HTMLInputElement
          if (findInput) {
            findInput.focus()
          }
        }, 50)
      }
    })
  }

  const handleAIRefactor = async (code: string, range: IRange) => {
    if (!editorRef.current) return;

    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
        const overlay = document.createElement('div');
        overlay.className = 'fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50';
        overlay.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg p-4 flex items-center gap-3">
                <svg class="animate-spin h-5 w-5 text-blue-500" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-gray-700 dark:text-gray-200">AI is analyzing your code...</span>
            </div>
        `;
        document.body.appendChild(overlay);

        const response = await refactorCode({
            code,
            context: 'Improve code quality and readability'
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const notification = document.createElement('div');
        notification.className = 'fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-3 rounded shadow-lg z-50';
        notification.innerHTML = `
            <div class="flex items-center gap-2">
                <span>‚ú® Analysis complete! Found ${response.suggestions.length} suggestions.</span>
            </div>
        `;
        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        overlay.remove();
        setTimeout(() => notification.remove(), 3000);

    } catch (error) {
        console.error('AI Refactor Error:', error);
        const notification = document.createElement('div');
        notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50';
        notification.textContent = 'Failed to analyze code';
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }
  };

  const handleEditorChange = (value: string | undefined) => {
    if (value !== undefined) {
      setCode(value)
      onChange?.(value)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
  const handleSave = async (code: string) => {
    if (!currentFile) return;

    try {
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'Analyzing code...';
      document.body.appendChild(notification);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç API —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      const newAnalysis = await analyzeCode(code, currentFile.id);
      setAnalysis(newAnalysis);
      lastAnalyzedFileId.current = currentFile.id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      onSave?.(code);

      notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'File saved and analyzed!';
      setTimeout(() => notification.remove(), 2000);
    } catch (error) {
      console.error('Save and analysis error:', error);
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50';
      notification.textContent = 'Error during analysis';
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 2000);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+S
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.ctrlKey || e.metaKey) && (e.key.toLowerCase() === 's' || e.key === '—ã')) {
        e.preventDefault();
        if (currentFile) {
          handleSave(code);
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [code, currentFile]);

  return (
    <div className="flex-1 overflow-hidden">
      {currentFile && (
        <div className="px-4 py-2 bg-gray-100 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600">
          <span className="text-sm text-gray-600 dark:text-gray-300">{currentFile.name}</span>
        </div>
      )}
      <Editor
        height="calc(100% - 36px)"
        language={currentFile?.name.endsWith('.tsx') ? 'typescript' : 'javascript'}
        theme={isDarkMode ? 'vs-dark' : 'light'}
        value={code}
        onChange={handleEditorChange}
        onMount={handleEditorDidMount}
        options={{
          minimap: { enabled: false },
          scrollBeyondLastLine: false,
          fontSize: 14,
          tabSize: 2,
          automaticLayout: true,
          wordWrap: 'on',
          find: {
            addExtraSpaceOnTop: false,
            seedSearchStringFromSelection: 'selection',
            autoFindInSelection: 'never'
          }
        }}
      />
    </div>
  )
}
